---
apiVersion: crdb.cockroachlabs.com/v1alpha1
kind: CrdbCluster
metadata:
  name: crdb
spec:
  dataStore:
    pvc:
      source:
        claimName: ""
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "1Gi"
        volumeMode: Filesystem
    supportsAutoResize: false
  image:
    name: cockroachdb/cockroach:v19.2.6
  nodes: 1
  resources: {}
  tlsEnabled: true

---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: crdb
    app.kubernetes.io/name: cockroachdb
    statefulset.kubernetes.io/pod-name: crdb-0
  name: crdb-0
spec:
  automountServiceAccountToken: false
  containers:
  - args:
    - start
    - --join=crdb-0.crdb.[sandbox_namespace]:26257
    - --advertise-host=$(POD_NAME).crdb.[sandbox_namespace]
    - --logtostderr=INFO
    - --certs-dir=/cockroach/cockroach-certs/
    - --http-port=8080
    - --port=26257
    - --cache=25%
    - --max-sql-memory=25%
    command:
    - /cockroach/cockroach
    env:
    - name: COCKROACH_CHANNEL
      value: kubernetes-operator
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: cockroachdb/cockroach:v19.2.6
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
        scheme: HTTPS
      initialDelaySeconds: 30
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    name: db
    ports:
    - containerPort: 26257
      name: grpc
      protocol: TCP
    - containerPort: 8080
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 2
      httpGet:
        path: /health?ready=1
        port: http
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /cockroach/cockroach-data/
      name: datadir
    - mountPath: /cockroach/cockroach-certs/
      name: certs
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: cockroach-database-sa
  serviceAccountName: cockroach-database-sa
  subdomain: crdb
  terminationGracePeriodSeconds: 60
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: datadir
        persistentVolumeClaim:
          claimName: ""
  - name: certs
    projected:
      defaultMode: 256
      sources:
      - secret:
          items:
          - key: ca.crt
            path: ca.crt
          - key: tls.crt
            path: node.crt
          - key: tls.key
            path: node.key
          name: crdb-node
      - secret:
          items:
          - key: tls.crt
            path: client.root.crt
          - key: tls.key
            path: client.root.key
          name: crdb-root

---
apiVersion: v1
data:
  ca.crt: '[replaced]'
  tls.crt: '[replaced]'
  tls.key: '[replaced]'
kind: Secret
metadata:
  name: crdb-node
type: Opaque

---
apiVersion: v1
data:
  ca.crt: '[replaced]'
  tls.crt: '[replaced]'
  tls.key: '[replaced]'
kind: Secret
metadata:
  name: crdb-root
type: Opaque

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: _status/vars
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: crdb
    app.kubernetes.io/managed-by: cockroach-operator
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/part-of: cockroachdb
  name: crdb
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 26257
    protocol: TCP
    targetPort: 26257
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: crdb
    app.kubernetes.io/name: cockroachdb
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: crdb
    app.kubernetes.io/managed-by: cockroach-operator
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/part-of: cockroachdb
  name: crdb-public
spec:
  clusterIP: '[some_ip]'
  ports:
  - name: grpc
    port: 26257
    protocol: TCP
    targetPort: 26257
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: crdb
    app.kubernetes.io/name: cockroachdb
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: crdb
    app.kubernetes.io/managed-by: cockroach-operator
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/part-of: cockroachdb
  name: crdb
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: crdb
      app.kubernetes.io/name: cockroachdb
  serviceName: crdb
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: crdb
        app.kubernetes.io/name: cockroachdb
    spec:
      automountServiceAccountToken: false
      containers:
      - args:
        - start
        - --join=crdb-0.crdb.[sandbox_namespace]:26257
        - --advertise-host=$(POD_NAME).crdb.[sandbox_namespace]
        - --logtostderr=INFO
        - --certs-dir=/cockroach/cockroach-certs/
        - --http-port=8080
        - --port=26257
        - --cache=25%
        - --max-sql-memory=25%
        command:
        - /cockroach/cockroach
        env:
        - name: COCKROACH_CHANNEL
          value: kubernetes-operator
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: cockroachdb/cockroach:v19.2.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: http
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: db
        ports:
        - containerPort: 26257
          name: grpc
          protocol: TCP
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /health?ready=1
            port: http
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /cockroach/cockroach-data/
          name: datadir
        - mountPath: /cockroach/cockroach-certs/
          name: certs
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: cockroach-database-sa
      serviceAccountName: cockroach-database-sa
      terminationGracePeriodSeconds: 60
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: ""
      - name: certs
        projected:
          defaultMode: 256
          sources:
          - secret:
              items:
              - key: ca.crt
                path: ca.crt
              - key: tls.crt
                path: node.crt
              - key: tls.key
                path: node.key
              name: crdb-node
          - secret:
              items:
              - key: tls.crt
                path: client.root.crt
              - key: tls.key
                path: client.root.key
              name: crdb-root
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate


package(default_visibility = ["//visibility:public"])

load("@io_k8s_repo_infra//defs:run_in_workspace.bzl", "workspace_binary")

genrule(
    name = "fetch_jq",
    srcs = select({
        ":m1": ["@jq_osx//file"],
        ":darwin": ["@jq_osx//file"],
        ":k8": ["@jq_linux//file"],
    }),
    outs = ["jq"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_openshift",
    srcs = select({
        ":m1": ["@openshift_darwin//:file"],
        ":darwin": ["@openshift_darwin//:file"],
        ":k8": ["@openshift_linux//:file"],
    }),
    outs = ["openshift-install"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_oc",
    srcs = select({
        ":m1": ["@oc_darwin//:file"],
        ":darwin": ["@oc_darwin//:file"],
        ":k8": ["@oc_linux//:file"],
    }),
    outs = ["oc"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_preflight",
    srcs = select({
        ":k8": ["@preflight_linux//file"],
    }),
    outs = ["preflight"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_faq",
    srcs = select({
        ":m1": ["@faq_osx//file"],
        ":darwin": ["@faq_osx//file"],
        ":k8": ["@faq_linux//file"],
    }),
    outs = ["faq"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "com_coreos_etcd",
    srcs = select({
        ":m1": ["@com_coreos_etcd_darwin_amd64//:file"],
        ":darwin": ["@com_coreos_etcd_darwin_amd64//:file"],
        ":k8": ["@com_coreos_etcd_linux_amd64//:file"],
    }),
    outs = ["etcd"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "io_kubernetes_kube-apiserver",
    srcs = select({
        ":m1": ["@kube-apiserver_darwin_amd64//file"],
        ":darwin": ["@kube-apiserver_darwin_amd64//file"],
        ":k8": ["@kube-apiserver_linux_amd64//file"],
    }),
    outs = ["kube-apiserver"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_kubectl",
    srcs = select({
        ":m1": ["@kubectl_1_18_darwin//file"],
        ":darwin": ["@kubectl_1_18_darwin//file"],
        ":k8": ["@kubectl_1_18_linux//file"],
    }),
    outs = ["kubectl"],
    cmd = "cp $(SRCS) $@",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_golangci_lint",
    srcs = select({
        ":m1": ["@golangci_lint_m1//:file"],
        ":darwin": ["@golangci_lint_darwin//:file"],
        ":k8": ["@golangci_lint_linux//:file"],
    }),
    outs = ["golangci-lint"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_kazel",
    srcs = ["@io_k8s_repo_infra//cmd/kazel"],
    outs = ["kazel"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_gazelle",
    srcs = ["@bazel_gazelle//cmd/gazelle"],
    outs = ["gazelle"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_gofmt",
    srcs = ["@go_sdk//:bin/gofmt"],
    outs = ["gofmt"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

workspace_binary(
    name = "go",
    cmd = "@go_sdk//:bin/go",
)

genrule(
    name = "fetch_k3d",
    srcs = select({
        ":darwin": ["@k3d_darwin//file"],
        ":k8": ["@k3d_linux//file"],
        ":m1": ["@k3d_m1//file"],
    }),
    outs = ["k3d"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

# fetch_kubetest2 rules to fetch the binary for kubetest2 used on e2e tests that are saved on a google cloud bucket
genrule(
    name = "fetch_kubetest2",
    srcs = select({
        ":m1": ["@kubetest2_darwin//file"],
        ":darwin": ["@kubetest2_darwin//file"],
        ":k8": ["@kubetest2_linux//file"],
    }),
    outs = ["kubetest2"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

# fetch_kubetest2_gke rules to fetch the binary for kubetest2_gke used on e2e tests that are saved on a google cloud bucket
genrule(
    name = "fetch_kubetest2_gke",
    srcs = select({
        ":m1": ["@kubetest2_gke_darwin//file"],
        ":darwin": ["@kubetest2_gke_darwin//file"],
        ":k8": ["@kubetest2_gke_linux//file"],
    }),
    outs = ["kubetest2-gke"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

# fetch_kubetest2_exe`rules to fetch the binary for kubetest2_exe used on e2e tests that are saved on a google cloud bucket
genrule(
    name = "fetch_kubetest2_exe",
    srcs = select({
        ":m1": ["@kubetest2_exe_darwin//file"],
        ":darwin": ["@kubetest2_exe_darwin//file"],
        ":k8": ["@kubetest2_exe_linux//file"],
    }),
    outs = ["kubetest2-tester-exec"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch_controller-gen",
    srcs = ["@io_k8s_sigs_controller_tools//cmd/controller-gen"],
    outs = ["controller-gen"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

#  fetch_operator-sdk rules to fetch the binary from github
genrule(
    name = "fetch_operator-sdk",
    srcs = select({
        ":m1": ["@operator_sdk_darwin//file"],
        ":darwin": ["@operator_sdk_darwin//file"],
        ":k8": ["@operator_sdk_linux//file"],
    }),
    outs = ["operator-sdk"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

#  fetch_opm rules to fetch the binary from github
genrule(
    name = "fetch_opm",
    srcs = select({
        ":m1": ["@opm_darwin//:file"],
        ":darwin": ["@opm_darwin//:file"],
        ":k8": ["@opm_linux//:file"],
    }),
    outs = ["opm"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

#  fetch_crdb downloads the cockroach binary
genrule(
    name = "fetch_crdb",
    srcs = select({
        ":m1": ["@crdb_darwin//:file"],
        ":darwin": ["@crdb_darwin//:file"],
        ":k8": ["@crdb_linux//:file"],
    }),
    outs = ["cockroach"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

#  fetch_kustomize rules to fetch the binary from github
genrule(
    name = "fetch_kustomize",
    srcs = select({
        ":m1": ["@kustomize_darwin_arm//:file"],
        ":darwin": ["@kustomize_darwin//:file"],
        ":k8": ["@kustomize_linux//:file"],
    }),
    outs = ["kustomize"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "fetch-aws-k8s-tester",
    srcs = select({
        ":m1": ["@aws-k8s-tester-m1//file"],
        ":darwin": ["@aws-k8s-tester-darwin//file"],
        ":k8": ["@aws-k8s-tester-linux//file"],
    }),
    outs = ["aws-k8s-tester"],
    cmd = "cp $(SRCS) $@",
    visibility = ["//visibility:public"],
)

config_setting(
    name = "k8",
    values = {"host_cpu": "k8"},
    visibility = ["//visibility:private"],
)

config_setting(
    name = "darwin",
    values = {"host_cpu": "darwin"},
    visibility = ["//visibility:private"],
)

config_setting(
    name = "m1",
    values = {"host_cpu": "darwin_arm64"},
    visibility = ["//visibility:private"],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)

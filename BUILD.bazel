# gazelle:prefix github.com/cockroachdb/cockroach-operator
# gazelle:proto disable_global
# gazelle:exclude docs/generated/reference/generate/json_swagger

load("@io_bazel_rules_docker//container:container.bzl", "container_push")

# export WORKSPACE so workspace_binary rules can be used outside the root
exports_files([
    "WORKSPACE",
    "LICENSE",
    "go.mod",
    "go.sum",
])

# TODO
load("@bazel_gazelle//:def.bzl", "gazelle")

gazelle(name = "gazelle")

container_push(
    name = "push_operator_image",
    format = "Docker",
    image = "//cmd/cockroach-operator:operator_image",
    registry = "{STABLE_DOCKER_REGISTRY}",
    repository = "{STABLE_IMAGE_REPOSITORY}",
    tag = "{STABLE_DOCKER_TAG}",
)

container_push(
    name = "push_operator_bundle_image",
    format = "Docker",
    image = "//cmd/cockroach-operator:operator_bundle_image",
    registry = "{RH_BUNDLE_REGISTRY}",
    repository = "{RH_BUNDLE_IMAGE_REPOSITORY}",
    tag = "{RH_BUNDLE_IMAGE_TAG}",
)

filegroup(
    name = "license",
    srcs = ["LICENSE"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "package-srcs",
    srcs = glob(
        ["**"],
        exclude = [
            "bazel-*/**",
            ".git/**",
        ],
    ),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [
        ":package-srcs",
        "//apis/v1alpha1:all-srcs",
        "//cmd/cockroach-operator:all-srcs",
        "//config:all-srcs",
        "//deploy/certified-metadata-bundle/cockroach-operator/latest/manifests:all-srcs",
        "//deploy/certified-metadata-bundle/cockroach-operator/latest/metadata:all-srcs",
        "//e2e/create:all-srcs",
        "//e2e/decomission:all-srcs",
        "//e2e/kubetest2-openshift:all-srcs",
        "//e2e/pvcresize:all-srcs",
        "//e2e/upgrades:all-srcs",
        "//examples:all-srcs",
        "//hack:all-srcs",
        "//manifests:all-srcs",
        "//pkg/actor:all-srcs",
        "//pkg/client/clientset/versioned:all-srcs",
        "//pkg/client/informers/externalversions:all-srcs",
        "//pkg/client/listers/apis/v1alpha1:all-srcs",
        "//pkg/clustersql:all-srcs",
        "//pkg/clusterstatus:all-srcs",
        "//pkg/condition:all-srcs",
        "//pkg/controller:all-srcs",
        "//pkg/database:all-srcs",
        "//pkg/featuregates:all-srcs",
        "//pkg/features:all-srcs",
        "//pkg/healthchecker:all-srcs",
        "//pkg/kube:all-srcs",
        "//pkg/labels:all-srcs",
        "//pkg/ptr:all-srcs",
        "//pkg/resource:all-srcs",
        "//pkg/scale:all-srcs",
        "//pkg/security:all-srcs",
        "//pkg/testutil:all-srcs",
        "//pkg/tls:all-srcs",
        "//pkg/update:all-srcs",
        "//pkg/util:all-srcs",
        "//pkg/utilfeature:all-srcs",
    ],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)

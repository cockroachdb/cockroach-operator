load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")

go_library(
    name = "go_default_library",
    srcs = ["main.go"],
    importpath = "github.com/cockroachdb/cockroach-operator/cmd/cockroach-operator",
    visibility = ["//visibility:private"],
    deps = [
        "//api/v1alpha1:go_default_library",
        "//pkg/controller:go_default_library",
        "//pkg/utilfeature:go_default_library",
        "@io_k8s_apimachinery//pkg/runtime:go_default_library",
        "@io_k8s_client_go//kubernetes/scheme:go_default_library",
        "@io_k8s_client_go//plugin/pkg/client/auth/gcp:go_default_library",
        "@io_k8s_sigs_controller_runtime//:go_default_library",
        "@io_k8s_sigs_controller_runtime//pkg/log/zap:go_default_library",
    ],
)

go_binary(
    name = "cockroach-operator",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "licenses",
    srcs = ["//:license"],
    mode = "0755",
    package_dir = "/licenses",
)

container_image(
    name = "ubi_base_image",
    # References container_pull from WORKSPACE
    base = "@redhat_ubi_minimal//image",
    labels = {
        "name": "CockroachDB Operator",
        "vendor": "Cockroach Labs",
        "release": "{NUMBER_COMMITS_ON_BRANCH}",
        "version": "{STABLE_DOCKER_TAG}",
        "summary": "CockroachDB is a distributed SQL database",
        "description": "CockroachDB is a PostgreSQL wire-compatible distributed SQL database",
    },
    stamp = True,
    tars = [":licenses"],
)

go_image(
    name = "operator_image",
    # using the ubi image instead of the go base image
    base = ":ubi_base_image",
    binary = ":cockroach-operator",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
